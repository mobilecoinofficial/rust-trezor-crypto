var searchIndex = JSON.parse('{\
"trezor_crypto_lib":{"doc":"A rust implementation of the trezor-crypto library","t":[6,6,0,0,0,0,0,6,6,6,6,0,5,5,5,5,5,5,5,5,5,0,0,17,17,17,17,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,5,6,5,6,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,6,11,11,11,11,11,11,11,11,6,6,3,6,3,6,3,3,11,11,11,11,6,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,5,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,12,11,11,11,11,12,12,12,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,17,17,3,2,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,12,12,11,12,12,12,11,11,11,11,11,11],"n":["Int","UInt","ed25519","ffi","ge","modm","test","PublicKey","Scalar","SecretKey","Signature","consts","dalek_curve25519_scalarmult","dalek_curved25519_scalarmult_basepoint","dalek_ed25519_publickey","dalek_ed25519_publickey_ext","dalek_ed25519_randombytes_unsafe","dalek_ed25519_sign","dalek_ed25519_sign_ext","dalek_ed25519_sign_open","dalek_ed25519_sign_open_batch","keccak","sha3","PUBLIC_KEY_LENGTH","SCALAR_LENGTH","SECRET_KEY_LENGTH","SIGNATURE_LENGTH","dalek_ed25519_publickey_keccak","dalek_ed25519_sign_keccak","dalek_ed25519_sign_open_keccak","dalek_ed25519_publickey_sha3","dalek_ed25519_sign_open_sha3","dalek_ed25519_sign_sha3","PublicKey","SecretKey","Signature","__uint32_t","__uint8_t","bignum25519","bignum25519align16","bignum256modm","bignum256modm_element_t","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","curve25519_donna","curve25519_donna_basepoint","curve25519_key","curve25519_scalarmult","curved25519_key","curved25519_scalarmult_basepoint","ed25519_public_key","ed25519_publickey","ed25519_publickey_ext","ed25519_publickey_keccak","ed25519_publickey_sha3","ed25519_randombytes_unsafe","ed25519_scalarmult_keccak","ed25519_scalarmult_sha3","ed25519_secret_key","ed25519_sign","ed25519_sign_ext","ed25519_sign_keccak","ed25519_sign_open","ed25519_sign_open_batch","ed25519_sign_open_keccak","ed25519_sign_open_sha3","ed25519_sign_sha3","ed25519_signature","fmt","fmt","fmt","fmt","from","from","from","from","ge25519","ge25519_niels","ge25519_niels_t","ge25519_p1p1","ge25519_p1p1_t","ge25519_pniels","ge25519_pniels_t","ge25519_t","into","into","into","into","size_t","t","t","t2d","t2d","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","x","xaddy","xaddy","y","y","ysubx","ysubx","z","z","z","Ge25519","borrow","borrow_mut","clone","clone_into","default","ed25519_verify","eq","fmt","from","from","ge25519_add","ge25519_check","ge25519_copy","ge25519_double","ge25519_double_scalarmult_vartime","ge25519_double_scalarmult_vartime2","ge25519_eq","ge25519_fromfe_frombytes_vartime","ge25519_mul8","ge25519_pack","ge25519_scalarmult","ge25519_scalarmult_base_wrapper","ge25519_set_neutral","ge25519_unpack_vartime","into","ne","t","to_owned","try_from","try_into","type_id","x","y","z","Bignum25519","Bignum256Modm","add256_modm","check256_modm","contract256_modm","copy256_modm","eq256_modm","expand256_modm","expand_raw256_modm","get256_modm","iszero256_modm","mul256_modm","muladd256_modm","mulsub256_modm","set256_modm","sub256_modm","Batch","DALEK","DONNA","Driver","UInt","borrow","borrow","borrow_mut","borrow_mut","curve25519_scalarmult","curved25519_scalarmult_basepoint","ed25519_publickey","ed25519_publickey_ext","ed25519_sign","ed25519_sign_ext","ed25519_sign_open","ed25519_sign_open_batch","from","from","into","into","lengths","messages","new","public_keys","secret_keys","signatures","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["trezor_crypto_lib","","","","","","","trezor_crypto_lib::ed25519","","","","","","","","","","","","","","","","trezor_crypto_lib::ed25519::consts","","","","trezor_crypto_lib::ed25519::keccak","","","trezor_crypto_lib::ed25519::sha3","","","trezor_crypto_lib::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trezor_crypto_lib::ge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trezor_crypto_lib::modm","","","","","","","","","","","","","","","","trezor_crypto_lib::test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Alias for int on all platforms","Alias for size_t on 64-bit platforms where usize_t is …","Curve25519 operations over <code>sha512</code> (default), <code>keccak</code>, and …","FFI bindings for compatibility tests, derived from …","Generic edwards curve operations, ABI compatible with …","Modulo <code>m</code> operations ABI compatible with <code>modm-donna-32bit.h</code>","Helpers to ensure ABI compatibility for use when testing","Ed25519 Public Key, compatible with donna’s …","Ed25519 Scalar, compatible with donna’s …","Ed25519 Secret Key, compatible with donna’s …","Ed25519 Signature, compatible with donna’s …","Common constants","Scalar multiplication using the provided basepoint","Perform scalar multiplication of <code>e</code> over the edwards curve …","Derives a public key from a private key (using the default …","Generate a public key using the expanded (<code>sk + sk_ext</code>) …","Generate random bytes using the system RNG","Signs a message using the provided secret key (using the …","Generate a signature using the expanded (<code>sk + sk_ext</code>) form …","Verifies a signed message (using the default <code>sha512</code> digest)","Batch verify signatures, <code>valid[i] == 1</code> for valid, …","ed25519 API using <code>keccak512</code> signatures, equivalent to …","ed25519 API using <code>sha3</code> signatures, equivalent to …","","","","","Derives a public key from a private key using keccak digest","Signs a message using the provided secret key using keccak …","Verifies a message using the provided secret key using …","Derives a public key from a private key using sha3 digest","Verifies a message using the provided secret key using …","Signs a message using the provided secret key using sha3 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Edwards point object compatible with <code>ge25519_t</code> from …","","","","","","Timing safe memory compare","","","Returns the argument unchanged.","","Point addition, <code>r = a + b</code>","Check if point <code>p1</code> is on a curve","Point copy, <code>r = p</code>","Point doubling, <code>r = 2 * p</code>","Point/Scalar multiplication, <code>r = [s1]p1 + [s2]base</code>","Point/Scalar multiplication, <code>r = [s1]p1 + [s2]p2</code>","Point comparison, returns 1 if points are equal, 0 …","Point from hash (<code>[u8; 32]</code>) in variable time (monero impl) …","Multiply by cofactor, <code>r = [8]P</code>","Convert point <code>p1</code> (<code>Ge25519</code>) to compressed form <code>r</code> (<code>[u8; 32]</code>)","Point scalar multiplication, <code>r = [s1]p1</code>, constant time","Compute point from scalar via niels_basepoint, <code>r = s * B</code>","TODO","Unpack compressed curve form <code>c</code> (<code>[u8; 32]</code>) to <code>r</code> (<code>Ge25519</code>)","Calls <code>U::from(self)</code>.","","","","","","","","","","Bignum25519 type for FFI, maps to <code>uint32_t bignum25519[10]</code> …","Bignum256Modm type for FFI, maps to …","Scalar addition, <code>r = x + y</code>","Checks whether a scalar is valid. Returns 1 for valid, 0 …","Scalar contraction, contracts <code>Bignum256Modm</code> (<code>[u32; 9]</code>) to …","Scalar copy, <code>r = x</code>","Check whether two scalars are equal, returns 1 for equal, …","Scalar expansion, expands <code>[u8; 32]</code> to <code>Bignum256Modm</code> (…","Raw scalar expansion, expands <code>[u8; 32]</code> to <code>Bignum256Modm</code> (…","Converts a scalar to u64 (if possible), returns a 1 and …","Check whether a scalar is zero, returns 1 on success, 0 on …","Scalar multiplication, <code>r = x * y</code>","Scalar multiply then add, <code>r = c + a * b</code>","Scalar multiply then subtract, <code>r = c - a * b</code>","Creates a scalar <code>r</code> from u64 value <code>v</code>.","Scalar subtraction, <code>r = x - y</code>","","Dalek driver implementation (native rust)","Donna driver implementation (via FFI)","Driver ABI for dalek or donna impls","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generate a collection for batch verification","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,0,0,0,0,0,0,0,0,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,4,0,5,5,5,5,5,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,6,7,6,6,6,6,6,6,6,6,6,7,6,7,7,7,7,7,7,7,6,7,6,7,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["publickey",0],["secretkey",0],["publickey",0]]],[[["scalar",0],["scalar",0]]],[[["secretkey",0],["publickey",0]]],[[["secretkey",0],["secretkey",0],["publickey",0]]],[[["u8",0],["uint",6]]],[[["u8",0],["uint",6],["secretkey",0],["publickey",0],["signature",0]]],[[["u8",0],["uint",6],["secretkey",0],["secretkey",0],["publickey",0],["signature",0]]],[[["u8",0],["uint",6],["publickey",0],["signature",0]],["int",6]],[[["u8",0],["uint",0],["u8",0],["u8",0],["uint",6],["int",0]],["int",6]],null,null,null,null,null,null,[[["secretkey",0],["publickey",0]]],[[["u8",0],["uint",6],["secretkey",0],["publickey",0],["signature",0]]],[[["u8",0],["uint",6],["publickey",0],["signature",0]],["int",6]],[[["secretkey",0],["publickey",0]]],[[["u8",0],["uint",6],["publickey",0],["signature",0]],["int",6]],[[["u8",0],["uint",6],["secretkey",0],["publickey",0],["signature",0]]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ge25519_t",3]],["ge25519_t",3]],[[["ge25519_p1p1_t",3]],["ge25519_p1p1_t",3]],[[["ge25519_niels_t",3]],["ge25519_niels_t",3]],[[["ge25519_pniels_t",3]],["ge25519_pniels_t",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ge25519_t",3],["formatter",3]],["result",6]],[[["ge25519_p1p1_t",3],["formatter",3]],["result",6]],[[["ge25519_niels_t",3],["formatter",3]],["result",6]],[[["ge25519_pniels_t",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["ge25519",3]],["ge25519",3]],[[["",0],["",0]]],[[],["ge25519",3]],[[["c_uchar",0],["c_uchar",0],["size_t",6]],["c_int",6]],[[["ge25519",3],["ge25519",3]],["bool",0]],[[["ge25519",3],["formatter",3]],["result",6]],[[]],[[["edwardspoint",3]],["ge25519",3]],[[["ge25519",0],["ge25519",0],["ge25519",0],["c_uchar",6]]],[[["ge25519",0]],["c_int",6]],[[["ge25519",0],["ge25519",0]]],[[["ge25519",0],["ge25519",0]]],[[["ge25519",0],["ge25519",0],["bignum256modm",0],["bignum256modm",0]]],[[["ge25519",0],["ge25519",0],["bignum256modm",0],["ge25519",0],["bignum256modm",0]]],[[["ge25519",0],["ge25519",0]],["c_int",6]],[[["ge25519",0]]],[[["ge25519",0],["ge25519",0]]],[[["ge25519",0]]],[[["ge25519",0],["ge25519",0],["bignum256modm",0]]],[[["ge25519",0],["bignum256modm",0]]],[[["ge25519",0]]],[[["ge25519",0]],["c_int",6]],[[]],[[["ge25519",3],["ge25519",3]],["bool",0]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["bignum256modm",0],["bignum256modm",0],["bignum256modm",0]]],[[["bignum256modm",0]],["c_int",6]],[[["bignum256modm",0]]],[[["bignum256modm",0],["bignum256modm",0]]],[[["bignum256modm",0],["bignum256modm",0]],["c_int",6]],[[["bignum256modm",0],["u8",0],["usize",0]]],[[["bignum256modm",0]]],[[["u64",0],["bignum256modm",0]],["c_int",6]],[[["bignum256modm",0]],["c_int",6]],[[["bignum256modm",0],["bignum256modm",0],["bignum256modm",0]]],[[["bignum256modm",0],["bignum256modm",0],["bignum256modm",0],["bignum256modm",0]]],[[["bignum256modm",0],["bignum256modm",0],["bignum256modm",0],["bignum256modm",0]]],[[["bignum256modm",0],["u64",0]]],[[["bignum256modm",0],["bignum256modm",0],["bignum256modm",0]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["driver",3]],["batch",3]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"ge25519_t"],[3,"ge25519_p1p1_t"],[3,"ge25519_niels_t"],[3,"ge25519_pniels_t"],[3,"Ge25519"],[3,"Driver"],[3,"Batch"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
